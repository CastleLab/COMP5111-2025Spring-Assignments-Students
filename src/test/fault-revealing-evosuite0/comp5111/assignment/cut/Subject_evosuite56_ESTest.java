/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 06 17:29:32 GMT 2025
 */

package comp5111.assignment.cut;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import comp5111.assignment.cut.Subject;
import java.lang.reflect.Method;
import java.nio.CharBuffer;
import java.time.format.DateTimeParseException;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Subject_evosuite56_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isPort("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isIntranetv4((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      long long0 = Subject.WebUtils.ipToLong("oxO9qZ62");
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = Subject.WebUtils.clearDomainPort("http://;,:mg+bf");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      long long0 = Subject.DateTimeUtils.getMillis(false, 8, 8, 8, 9, 9, 9, 9);
      assertEquals((-61895744853000L), long0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      char[] charArray0 = Subject.DateTimeUtils.hourplus12('1', 'M');
      assertArrayEquals(new char[] {'1', 'M'}, charArray0);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      char[] charArray0 = Subject.DateTimeUtils.hourplus12('M', 'K');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      char[] charArray0 = Subject.DateTimeUtils.hourplus12('0', 'e');
      assertArrayEquals(new char[] {'0', 'e'}, charArray0);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      char[] charArray0 = Subject.DateTimeUtils.hourplus12('0', '0');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'2', '0'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      char[] charArray0 = Subject.DateTimeUtils.hourplus12('1', '1');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'2', '3'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.secToString((-225L));
      assertEquals("-225 s", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.secToString(86400L);
      assertEquals("24 h", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.secToString(172800L);
      assertEquals("2 d", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.secToString(1209600L);
      assertEquals("2 w", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.secToString(1266458095);
      assertEquals("40 y", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.secToString(2750L);
      assertEquals("46 m", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.thisSeasonEnd(32, 12);
      assertEquals("32-12-31", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.thisSeasonEnd(1617, 9);
      assertEquals("1617-09-30", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.thisSeasonEnd(5, 5);
      assertEquals("5-06-30", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.thisSeasonEnd(1, 1);
      assertEquals("1-03-31", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.thisSeasonEnd(1255, 1255);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.thisSeasonEnd((-179), (-386663803));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.thisSeason(11, 11);
      assertEquals("11-10-01", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.thisSeason(8, 8);
      assertEquals("8-07-01", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.thisSeason(32, 6);
      assertEquals("32-04-01", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.thisSeason(3378, 3378);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.thisSeason(2080, 1);
      assertEquals("2080-01-01", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.thisSeason((-592), (-592));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      char[] charArray0 = Subject.DateTimeUtils.splitMillis("7", "wGqD>!A6:Yc6PZ4e+NU");
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      char[] charArray0 = Subject.DateTimeUtils.splitMillis("4hNH <pFAPY8Z901|d8", "4hNH <pFAPY8Z901|d8");
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      char[] charArray0 = Subject.DateTimeUtils.splitMillis((String) null, (String) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      char[] charArray0 = Subject.DateTimeUtils.splitMillis("", "L>Co");
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.domStr((byte)0);
      assertEquals("(invalidDOM)", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.domStr(3463);
      assertEquals("(invalidDOM)", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.domStr(852);
      assertEquals("(invalidDOM)", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.domStr(11);
      assertEquals("11th", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.domStr(31);
      assertEquals("31st", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      long long0 = Subject.DateTimeUtils.getMillis(true, (byte) (-93), 0, (-1850), 574, 4296, 0, 0);
      assertEquals((-65262162240000L), long0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      long long0 = Subject.DateTimeUtils.getMillis(false, 100, 1395, 1395, 6, 1395, 6, 55);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      long long0 = Subject.DateTimeUtils.getMillis(true, (byte)0, (byte)9, (-2084548246), (-2084548246), (byte) (-41), (byte)9, (byte)9);
      assertEquals((-180168180500339000L), long0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      long long0 = Subject.DateTimeUtils.getMillis(true, (-2147483613), 1255, (-2147483613), (-2147483613), 1255, (-2147483613), 1255);
      assertEquals((-45053971010313000L), long0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.DateTimeUtils.parseDate("rkRU0(u6L,g7c(:A");
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text 'rkRU0(u6L,g7c(:A' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Date date0 = Subject.DateTimeUtils.parseDate("");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Date date0 = Subject.DateTimeUtils.parseDate("null");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Date date0 = Subject.DateTimeUtils.parseDate((String) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.regexMatch("fe80:cm;<jwyw/~f^6zbcq~", "", true, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.regexMatch("", "G*rn_uK?Qt%*gH!", false, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.regexMatch("0:0:0:0:0:0:0:1", (String) null, false, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.regexMatch((String) null, "comp5111.assignm@nt.cut.Subject$WebUtils$1", false, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = Subject.TextUtils.indexOf_re("#M!?c^OP58PF/z>i", 0, 'j');
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = Subject.TextUtils.indexOf_re("v", 0, 'v');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Subject.TextUtils.longestCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = ";,:mG+bf";
      stringArray0[1] = "4hNH <pFAPY8Z901|d8";
      String string0 = Subject.TextUtils.longestCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "wl";
      stringArray0[1] = "wl";
      stringArray0[2] = "wl";
      String string0 = Subject.TextUtils.longestCommonPrefix(stringArray0);
      assertEquals("wl", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = Subject.TextUtils.strLeftTrim(" C");
      assertEquals("C", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = Subject.TextUtils.strLeftTrim("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = Subject.TextUtils.strLeftTrim((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Subject.TextUtils subject_TextUtils0 = new Subject.TextUtils();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "y");
      boolean boolean0 = subject_TextUtils0.regionMatch("e<+k2|yOyR$3672Faer", false, 1000000, charBuffer0, (-834), 1000000);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Subject.TextUtils subject_TextUtils0 = new Subject.TextUtils();
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      boolean boolean0 = subject_TextUtils0.regionMatch(charBuffer0, false, (-3380), charBuffer0, (-3380), (-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Subject.TextUtils subject_TextUtils0 = new Subject.TextUtils();
      boolean boolean0 = subject_TextUtils0.regionMatch("\"<U", true, 2080, "", 102, 102);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Subject.TextUtils subject_TextUtils0 = new Subject.TextUtils();
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      boolean boolean0 = subject_TextUtils0.regionMatch(charBuffer0, true, 34, charBuffer0, 120, 120);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.equalsIgnoreCaseHash("", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Subject.TextUtils subject_TextUtils0 = new Subject.TextUtils();
      String string0 = subject_TextUtils0.abbreviate("", "", (-179), (-108916131));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Subject.TextUtils subject_TextUtils0 = new Subject.TextUtils();
      String string0 = subject_TextUtils0.abbreviate("MYP]9[%8^", "|", 8, 8);
      assertEquals("MYP]9[%|", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Subject.TextUtils subject_TextUtils0 = new Subject.TextUtils();
      String string0 = subject_TextUtils0.abbreviate("*yQMkjk8SxW^xW", "|", 8, 8);
      assertNotNull(string0);
      assertEquals("|8SxW^xW", string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Subject.TextUtils subject_TextUtils0 = new Subject.TextUtils();
      String string0 = subject_TextUtils0.abbreviate("comp5111.assignment.cut.Subject$WebUtils", "m", 48, 48);
      assertEquals("comp5111.assignment.cut.Subject$WebUtils", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Subject.TextUtils subject_TextUtils0 = new Subject.TextUtils();
      String string0 = subject_TextUtils0.abbreviate("rRMbizA", "cd\"Pem8wu}W", (-872), (-872));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Subject.TextUtils subject_TextUtils0 = new Subject.TextUtils();
      String string0 = subject_TextUtils0.abbreviate("a.'lJvGmqytj6)b4", (String) null, (-1037), (-1037));
      assertEquals("a.'lJvGmqytj6)b4", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Subject.TextUtils subject_TextUtils0 = new Subject.TextUtils();
      String string0 = subject_TextUtils0.abbreviate("", "HX\"HCYjQ?f}Lqo__!/A", (-179), (-108916131));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Subject.TextUtils subject_TextUtils0 = new Subject.TextUtils();
      String string0 = subject_TextUtils0.abbreviate("", "", 1, 1);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Subject.TextUtils subject_TextUtils0 = new Subject.TextUtils();
      String string0 = subject_TextUtils0.abbreviate((String) null, "G*rn_uK?Qt%*gH!", 1266458095, 1266458095);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = Subject.TextUtils.removeNameQuotes("/o^wXE/.web");
      assertEquals("/o^wXE/.web", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = Subject.TextUtils.removeNameQuotes("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = Subject.TextUtils.removeNameQuotes("1-03-31");
      assertEquals("1-03-31", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = Subject.TextUtils.removeNameQuotes((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.isNumber("L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.isNumber("f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.isNumber("4");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.isNumber("l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.isNumber("2080-01-01");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.isNumber("+bp]J-U}6'q3P?");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.isNumber("E3~Bo48DJ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.isNumber("e<+k2|yOyR$3672Faer");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.isNumber("127.0.0.1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.isNumber("/o^wXE/.web");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.isNumber("/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.isNumber("0:0:0:0:0:0:0:1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.isNumber("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = Subject.TextUtils.subString("7iUp/j", "7iUp/j", "comp5111.assignment.cut.Subject$WebUtils$1");
      boolean boolean0 = Subject.TextUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.equalsIgnoreCaseHash("?L3z8'", "?L3z8'");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.equalsIgnoreCaseHash((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.equalsIgnoreCaseHash((String) null, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = Subject.TextUtils.subString(">}", "");
      assertEquals(">}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = Subject.TextUtils.subString("E5A\u0001#", (String) null, "");
      assertEquals("E5A\u0001#", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = Subject.TextUtils.subString("d/3;2er=,", ";", "", false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = Subject.TextUtils.longestCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.isNotEmpty("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.isNotEmpty("UeuF7Ytw");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      long long0 = Subject.WebUtils.ipToLong("127.0.0.1");
      assertEquals(2130706433L, long0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isSubnet("D_R>8uOFb'>nFS(-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isSubnet("+bp]J-U}6'q3P?");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isSubnet(";H{S0)4e5xa!#PF&Lk/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isSubnet("Asia/Hong_Kong");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isSubnet((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isSubnet("Wu*ddm#{SF=s");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isPublicv4("w^;eh%7:~N");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isv4("4hNH <pFAPY8Z901|d8");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.WebUtils.isPublicv4((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("comp5111.assignment.cut.Subject$WebUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isPort("2");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isPrivatev4nonet_int(169, 594, 1668, (-1368));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isPrivatev4nonet_int(2, 382, 96, (-2147471219));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isIntranetv4("127.0.`.1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isIntranetv4("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isPublicv4("fe80:");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = Subject.WebUtils.clearDomainPort("m&GZ|YZ^.");
      assertEquals("m&gz|yz^", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = Subject.WebUtils.clearDomainPort(";,:mG+bf");
      assertNotNull(string0);
      assertEquals(";,", string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = Subject.WebUtils.clearDomainPort("https://<pa^l6i2`q~hu");
      assertEquals("<pa^l6i2`q~hu", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = Subject.WebUtils.clearDomainPort((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isDomainPrivate("comp5111.assignment.cut.Subject$WebUtils$1", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isDomainPrivate((String) null, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isDomainPrivate("yyyy/MM/dd HH:mm:ss", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)9;
      byte[] byteArray1 = Subject.WebUtils.removeWhitespace(byteArray0);
      assertEquals(8, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)13;
      byte[] byteArray1 = Subject.WebUtils.removeWhitespace(byteArray0);
      assertEquals(3, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[6] = (byte)10;
      byte[] byteArray1 = Subject.WebUtils.removeWhitespace(byteArray0);
      assertEquals(8, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)32;
      byte[] byteArray1 = Subject.WebUtils.removeWhitespace(byteArray0);
      assertEquals(5, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isIntranet("^wXE/.jpg");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isIntranet("fe80:");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "localhost";
      stringArray0[2] = "localhost";
      int int0 = Subject.WebUtils.localHostInList(stringArray0, 2448);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = "";
      int int0 = Subject.WebUtils.localHostInList(stringArray0, (-179));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = Subject.WebUtils.getString((String) null, (byte)108);
      assertEquals("                                                                                                            ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = Subject.WebUtils.getString("|dtL(g", 0);
      assertEquals("|dtL(g", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isIntranet("LOCALHOST");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isIntranetv4("0000:0000:0000:0000:0000:0000:0000:0001");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isIntranetv4("::1");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isIntranetv4("0:0:0:0:0:0:0:1");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isIntranet("z*i,v}4:N*");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "127.0.0.1";
      int int0 = Subject.WebUtils.localHostInList(stringArray0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Integer integer0 = new Integer(32);
      List<Integer> list0 = List.of(integer0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "|uf;B@";
      List<Method> list1 = Subject.WebUtils.getMethods(list0, stringArray0);
      assertNull(list1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String[] stringArray0 = new String[7];
      linkedList0.add((Object) null);
      stringArray0[0] = "null";
      List<Method> list0 = Subject.WebUtils.getMethods((List<Object>) linkedList0, stringArray0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Integer integer0 = new Integer(32);
      List<Integer> list0 = List.of(integer0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "2";
      List<Method> list1 = Subject.WebUtils.getMethods(list0, stringArray0);
      assertNull(list1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String[] stringArray0 = new String[0];
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1970152046));
      linkedList0.add(integer0);
      List<Method> list0 = Subject.WebUtils.getMethods((List<Integer>) linkedList0, stringArray0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-3517));
      linkedList0.addLast(integer0);
      List<Method> list0 = Subject.WebUtils.getMethods((List<Integer>) linkedList0);
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isImgFileName(".webp");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isImgFileName(".gif");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isImgFileName(".jpeg");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isImgFileName(".jpg");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isImgFileName(".png");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isImgFileName("o\"+tfzay");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Subject subject0 = new Subject();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Subject.WebUtils subject_WebUtils0 = new Subject.WebUtils();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Subject.DateTimeUtils subject_DateTimeUtils0 = new Subject.DateTimeUtils();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = Subject.TextUtils.subString("-1 s", "(U~w");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Subject.TextUtils subject_TextUtils0 = new Subject.TextUtils();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) subject_TextUtils0);
      List<Method> list0 = Subject.WebUtils.getMethods((List<Object>) linkedList0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.TextUtils.subString("2ott", "2ott", "2ott");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
