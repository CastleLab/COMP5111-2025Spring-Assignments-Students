/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 06 20:40:31 GMT 2025
 */

package comp5111.assignment.cut;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import comp5111.assignment.cut.Subject;
import java.lang.reflect.Method;
import java.nio.CharBuffer;
import java.time.format.DateTimeParseException;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Subject_evosuite271_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isPort("0:0:0:000:0:1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isIntranetv4((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      long long0 = Subject.WebUtils.ipToLong("WM\"'h7|&(yd7|-zWwxr");
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      long long0 = Subject.DateTimeUtils.getMillis(false, 1, 1, 1, 1, 1, 0, 0);
      assertEquals((-62135620542000L), long0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      long long0 = Subject.DateTimeUtils.getMillis(false, 278, 6, 6, 32, 6, 32, 32);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      char[] charArray0 = Subject.DateTimeUtils.hourplus12('1', 'a');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'1', 'a'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      char[] charArray0 = Subject.DateTimeUtils.hourplus12('1', '1');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'2', '3'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      char[] charArray0 = Subject.DateTimeUtils.hourplus12('0', 'S');
      assertArrayEquals(new char[] {'0', 'S'}, charArray0);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      char[] charArray0 = Subject.DateTimeUtils.hourplus12('0', '0');
      assertArrayEquals(new char[] {'2', '0'}, charArray0);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      char[] charArray0 = Subject.DateTimeUtils.hourplus12('2', 'K');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.secToString((-470));
      assertEquals("-470 s", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.secToString(7200L);
      assertEquals("2 h", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.secToString(719528L);
      assertEquals("8 d", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.secToString(1209600L);
      assertEquals("2 w", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.secToString(5111L);
      assertEquals("85 m", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.thisSeasonEnd(2238, 2238);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.thisSeasonEnd(8, 8);
      assertEquals("8-09-30", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.thisSeasonEnd((-372), 4);
      assertEquals("-372-06-30", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.thisSeasonEnd(1, 1);
      assertEquals("1-03-31", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.thisSeasonEnd((-1725285854), 12);
      assertEquals("-1725285854-12-31", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.thisSeasonEnd((-470), (-470));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.thisSeason((-3578), 10);
      assertEquals("-3578-10-01", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.thisSeason(7, 7);
      assertEquals("7-07-01", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.thisSeason(4, 4);
      assertEquals("4-04-01", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.thisSeason(1, 1);
      assertEquals("1-01-01", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.thisSeason(60, 60);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.thisSeason((-1), 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      char[] charArray0 = Subject.DateTimeUtils.splitMillis("KxQP1S''ZFJ&lYe2Zn", "yyyy-MM-dd HH:mm:ss");
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      char[] charArray0 = Subject.DateTimeUtils.splitMillis("Aa6uK", "yyyy/MM/dd HH:mm:ss");
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      char[] charArray0 = Subject.DateTimeUtils.splitMillis((String) null, "");
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      char[] charArray0 = Subject.DateTimeUtils.splitMillis("0:0:0:000:0:1", "^ ");
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.domStr(6183);
      assertEquals("(invalidDOM)", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.domStr('R');
      assertEquals("(invalidDOM)", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.domStr(13);
      assertEquals("13th", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.domStr(2031);
      assertEquals("(invalidDOM)", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.domStr((-1485));
      assertEquals("(invalidDOM)", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      long long0 = Subject.DateTimeUtils.getMillis(true, 100, 100, 419, 34, 34, 2363, 2363);
      assertEquals((-58713770797000L), long0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      long long0 = Subject.DateTimeUtils.getMillis(true, 0, 1188, 0, 0, 0, 0, 0);
      assertEquals((-59030899200000L), long0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      long long0 = Subject.DateTimeUtils.getMillis(false, 1416, 3366, 2232, 683, 1416, 3366, 1046);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Date date0 = Subject.DateTimeUtils.parseDate("null");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Date date0 = Subject.DateTimeUtils.parseDate("");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.DateTimeUtils.parseDate("y@`gaf|ycj,e6ucz}~");
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text 'y@`gaf|ycj,e6ucz}~' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Date date0 = Subject.DateTimeUtils.parseDate((String) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.regexMatch(":", "LOCALHOST", true, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.regexMatch("0>9<d`", "localhost", false, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.regexMatch("9guvS", (String) null, false, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.regexMatch((String) null, "(invalidDOM)", false, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = Subject.TextUtils.indexOf_re("zMrz3'_/j?j)Z", 0, 'j');
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = Subject.TextUtils.indexOf_re("1pc|N", 1, 'S');
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "\"2m";
      stringArray0[1] = "\"2m";
      stringArray0[2] = "\"2m";
      String string0 = Subject.TextUtils.longestCommonPrefix(stringArray0);
      assertEquals("\"2m", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "0>9<d`";
      stringArray0[1] = "0>9<d`";
      stringArray0[2] = "W!s";
      String string0 = Subject.TextUtils.longestCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "0>9<d`";
      stringArray0[1] = "0>9<d`";
      String string0 = Subject.TextUtils.longestCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Subject.TextUtils.longestCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = Subject.TextUtils.strLeftTrim("&*Tu}ofF*;LYZYX");
      assertEquals("&*Tu}ofF*;LYZYX", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = Subject.TextUtils.strLeftTrim((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = Subject.TextUtils.strLeftTrim("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Subject.TextUtils subject_TextUtils0 = new Subject.TextUtils();
      char[] charArray0 = new char[6];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      boolean boolean0 = subject_TextUtils0.regionMatch(charBuffer0, true, 0, "Isc/", 0, 0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Subject.TextUtils subject_TextUtils0 = new Subject.TextUtils();
      char[] charArray0 = new char[6];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      boolean boolean0 = subject_TextUtils0.regionMatch(charBuffer0, true, 0, "                                                                              ", 0, 6);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Subject.TextUtils subject_TextUtils0 = new Subject.TextUtils();
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      boolean boolean0 = subject_TextUtils0.regionMatch(charBuffer0, false, 1, "8 d", 1, 3366);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Subject.TextUtils subject_TextUtils0 = new Subject.TextUtils();
      CharBuffer charBuffer0 = CharBuffer.allocate(3163);
      boolean boolean0 = subject_TextUtils0.regionMatch(charBuffer0, false, 0, "0L[UVn<6aakJz.+a", 52, (byte)39);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Subject.TextUtils subject_TextUtils0 = new Subject.TextUtils();
      CharBuffer charBuffer0 = CharBuffer.allocate(683);
      boolean boolean0 = subject_TextUtils0.regionMatch(charBuffer0, false, 683, "8 d", (-104), 3366);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Subject.TextUtils subject_TextUtils0 = new Subject.TextUtils();
      char[] charArray0 = new char[9];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      boolean boolean0 = subject_TextUtils0.regionMatch(charBuffer0, false, (-754), charBuffer0, (-754), 367);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Subject.TextUtils subject_TextUtils0 = new Subject.TextUtils();
      char[] charArray0 = new char[7];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      boolean boolean0 = subject_TextUtils0.regionMatch("", false, (byte)18, charBuffer0, 2192, (-60));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Subject.TextUtils subject_TextUtils0 = new Subject.TextUtils();
      boolean boolean0 = subject_TextUtils0.regionMatch(".gif", false, (-3656), "W!s", (-22705936), (-1924));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = Subject.TextUtils.lowerHashCode((String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Subject.TextUtils subject_TextUtils0 = new Subject.TextUtils();
      String string0 = subject_TextUtils0.abbreviate("XW$Mkwv!^,5pO", "", (-2013265917), (byte) (-71));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Subject.TextUtils subject_TextUtils0 = new Subject.TextUtils();
      String string0 = subject_TextUtils0.abbreviate("$.r2&wxB9-IAw:e", "uR<g|,]~ZdLHH/]", 1450, 1046);
      assertEquals("$.r2&wxB9-IAw:e", string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Subject.TextUtils subject_TextUtils0 = new Subject.TextUtils();
      String string0 = subject_TextUtils0.abbreviate(" ", "}", (-2078956655), (-948));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Subject.TextUtils subject_TextUtils0 = new Subject.TextUtils();
      String string0 = subject_TextUtils0.abbreviate("ETKfoVn1]E", "N", 5, 5);
      assertEquals("NVnN", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Subject.TextUtils subject_TextUtils0 = new Subject.TextUtils();
      String string0 = subject_TextUtils0.abbreviate("", ">ilC7qU[y+S@,+g", 0, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Subject.TextUtils subject_TextUtils0 = new Subject.TextUtils();
      String string0 = subject_TextUtils0.abbreviate("", "", 0, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Subject.TextUtils subject_TextUtils0 = new Subject.TextUtils();
      String string0 = subject_TextUtils0.abbreviate("*", (String) null, (-273), (-459));
      assertEquals("*", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = Subject.TextUtils.removeNameQuotes("1-01-01");
      assertEquals("1-01-01", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = Subject.TextUtils.removeNameQuotes("y");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = Subject.TextUtils.removeNameQuotes((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.isNumber("f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.isNumber("d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.isNumber("E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.isNumber("5");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.isNumber("*");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.isNumber("+8x@v&Ed-E<GJJI");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.isNumber("Epl\"tVj4]:;7A8[F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.isNumber("em(|v[y>+!F6@t[]b;0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.isNumber("127.0.0.1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.isNumber(".gif.jpg");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.isNumber("0o]~I+xqP:");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.isNumber("l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.isNumber("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.isNumber((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.equalsIgnoreCaseHash("cY", "cY");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = Subject.TextUtils.subString("", "p%ITnXeE|9vDb1N", "p%ITnXeE|9vDb1N", false);
      boolean boolean0 = Subject.TextUtils.equalsIgnoreCaseHash(string0, string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = Subject.TextUtils.subString("", "p%ITnXeE|9vDb1N", "p%ITnXeE|9vDb1N", false);
      boolean boolean0 = Subject.TextUtils.equalsIgnoreCaseHash(string0, "LOCALHOST");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.equalsIgnoreCaseHash("y@`GAF|YCJ,e6UCz}~", "l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = Subject.TextUtils.subString("b\"0", "", "b\"0");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = Subject.TextUtils.subString("/f:d?Y,BnTD3Zi0x,", "", "$cE}pS#I(t9[]0", false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = Subject.TextUtils.subString("", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = Subject.TextUtils.removeNameQuotes("yyyy/MM/dd HH:mm:ss");
      assertEquals("yyyy/MM/dd HH:mm:ss", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.isNotEmpty("LOCALHOST");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.isNotEmpty("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = Subject.TextUtils.subString("", "p%ITnXeE|9vDb1N", "p%ITnXeE|9vDb1N", false);
      boolean boolean0 = Subject.TextUtils.isNotEmpty(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      long long0 = Subject.WebUtils.ipToLong("127.0.0.1");
      assertEquals(2130706433L, long0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isSubnet("aSP2lu-6hMrl, {-X");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isSubnet("-470 s");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isSubnet("Asia/Hong_Kong");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isSubnet("^ ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isSubnet((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isSubnet("yyyy/MM/dd HH:mm:ss");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isPublicv4("https://.gif");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isv4("yyyy/MM/dd HH:mm:ss");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.WebUtils.isPublicv4((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("comp5111.assignment.cut.Subject$WebUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isPort("0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isPrivatev4nonet_int(169, 1587, (-2214), (-115959602));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isPrivatev4nonet_int(127, 19, (-2394), 24);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isIntranet("comp5111.assignment.cut.Subject");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isv4("127.0.0.1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = Subject.WebUtils.clearDomainPort("");
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = Subject.WebUtils.clearDomainPort("k`z' .");
      assertNotNull(string0);
      assertEquals("k`z' ", string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = Subject.WebUtils.clearDomainPort("0:0:0:0:0:0:0:1");
      assertEquals("0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = Subject.WebUtils.clearDomainPort("https://.gif");
      assertEquals(".gif", string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = Subject.WebUtils.clearDomainPort("http://.gif");
      assertEquals(".gif", string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = Subject.WebUtils.clearDomainPort((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isDomainPrivate("?!--?<!-.AA", false);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isDomainPrivate("b\"0", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isDomainPrivate((String) null, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[5] = (byte)9;
      byte[] byteArray1 = Subject.WebUtils.removeWhitespace(byteArray0);
      assertEquals(7, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)13;
      byte[] byteArray1 = Subject.WebUtils.removeWhitespace(byteArray0);
      assertEquals(6, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte)10;
      byte[] byteArray1 = Subject.WebUtils.removeWhitespace(byteArray0);
      assertEquals(4, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)32;
      byte[] byteArray1 = Subject.WebUtils.removeWhitespace(byteArray0);
      assertEquals(7, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isIntranet("t*}q8h&*)=bSed:");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isIntranet("fe80:");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[1] = "LOCALHOST";
      stringArray0[5] = "LOCALHOST";
      int int0 = Subject.WebUtils.localHostInList(stringArray0, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "XW$Mkwv!^,5pO";
      int int0 = Subject.WebUtils.localHostInList(stringArray0, (byte)64);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = Subject.WebUtils.getString((String) null, 2703);
      String string1 = Subject.TextUtils.strLeftTrim(string0);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = Subject.WebUtils.getString("+ex,>8~}XR9[S0DR&+#", 99);
      assertEquals("+ex,>8~}XR9[S0DR&+#", string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isIntranetv4("LOCALhost");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isIntranetv4("0000:0000:0000:0000:0000:0000:0000:0001");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isIntranetv4("::1");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isIntranet("0:0:0:0:0:0:0:1");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isIntranet("127.0.0.1");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Object object0 = new Object();
      List<Object> list0 = List.of(object0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "{&?^";
      List<Method> list1 = Subject.WebUtils.getMethods(list0, stringArray0);
      assertNull(list1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Integer integer0 = new Integer(89);
      List<Integer> list0 = List.of(integer0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "null";
      List<Method> list1 = Subject.WebUtils.getMethods(list0, stringArray0);
      assertNull(list1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Object object0 = new Object();
      List<Object> list0 = List.of((Object) "+ex,>8~}XR9[S0DR&+#", (Object) "", (Object) "+ex,>8~}XR9[S0DR&+#", object0, (Object) "", (Object) "+ex,>8~}XR9[S0DR&+#", (Object) "+ex,>8~}XR9[S0DR&+#", object0, (Object) "+ex,>8~}XR9[S0DR&+#");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "+ex,>8~}XR9[S0DR&+#";
      List<Method> list1 = Subject.WebUtils.getMethods(list0, stringArray0);
      assertNull(list1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer((-862));
      List<Object> list0 = List.of(object0, object0, object0, object0, (Object) integer0, object0);
      String[] stringArray0 = new String[0];
      List<Method> list1 = Subject.WebUtils.getMethods(list0, stringArray0);
      assertEquals(0, list1.size());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      linkedList0.add((Object) predicate0);
      List<Method> list0 = Subject.WebUtils.getMethods((List<Object>) linkedList0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isImgFileName(".webp");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isImgFileName("WR~2ZF~JE*=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isImgFileName(".jpeg");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isImgFileName(".jpg");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isImgFileName(".png");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isImgFileName(".gif");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Subject subject0 = new Subject();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "");
      List<Method> list0 = Subject.WebUtils.getMethods((List<Object>) linkedList0);
      assertEquals(7, list0.size());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Subject.WebUtils subject_WebUtils0 = new Subject.WebUtils();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Subject.DateTimeUtils subject_DateTimeUtils0 = new Subject.DateTimeUtils();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Subject.TextUtils subject_TextUtils0 = new Subject.TextUtils();
      String string0 = subject_TextUtils0.abbreviate((String) null, "l7xcB^9wth", 96, 295);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = Subject.TextUtils.subString("&*Tu}ofF*;LYZYX", "&*Tu}ofF*;LYZYX", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }
}
