/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 06 23:08:50 GMT 2025
 */

package comp5111.assignment.cut;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import comp5111.assignment.cut.Subject;
import java.lang.reflect.Method;
import java.nio.CharBuffer;
import java.time.format.DateTimeParseException;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Subject_evosuite458_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isPort(":");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isIntranetv4((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      long long0 = Subject.WebUtils.ipToLong("|[:;{o,+/92{g");
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      long long0 = Subject.DateTimeUtils.getMillis(false, 9, 9, 9, 9, 0, 9, 2150);
      assertEquals((-61861444593000L), long0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      char[] charArray0 = Subject.DateTimeUtils.hourplus12('1', '1');
      assertArrayEquals(new char[] {'2', '3'}, charArray0);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      char[] charArray0 = Subject.DateTimeUtils.hourplus12('1', '%');
      assertArrayEquals(new char[] {'1', '%'}, charArray0);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      char[] charArray0 = Subject.DateTimeUtils.hourplus12('0', '3');
      assertArrayEquals(new char[] {'2', '1'}, charArray0);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      char[] charArray0 = Subject.DateTimeUtils.hourplus12('0', '0');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'2', '0'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      char[] charArray0 = Subject.DateTimeUtils.hourplus12('+', '+');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.secToString(1773L);
      assertEquals("30 m", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.secToString(114764);
      assertEquals("32 h", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.secToString(719528L);
      assertEquals("8 d", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.secToString(1209600L);
      assertEquals("2 w", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.secToString(1274968418);
      assertEquals("40 y", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.secToString((byte) (-1));
      assertEquals("-1 s", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.thisSeasonEnd((-2931), 2546);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.thisSeasonEnd(1, 11);
      assertEquals("1-12-31", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.thisSeasonEnd(399, 4);
      assertEquals("399-06-30", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.thisSeasonEnd(1, 3);
      assertEquals("1-03-31", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.thisSeasonEnd(1, 7);
      assertEquals("1-09-30", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.thisSeasonEnd(0, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.thisSeason(1274968418, 208);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.thisSeason(56, 11);
      assertEquals("56-10-01", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.thisSeason(6, 6);
      assertEquals("6-04-01", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.thisSeason(56, 3);
      assertEquals("56-01-01", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.thisSeason(56, 7);
      assertEquals("56-07-01", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.thisSeason(4, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      char[] charArray0 = Subject.DateTimeUtils.splitMillis("2cf-=ed3ay|", "D]I2YBbh1edIaGK95o");
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      char[] charArray0 = Subject.DateTimeUtils.splitMillis("yyyy-MM-dd HH:mm:ss", "yyyy-MM-dd HH:mm:ss");
      //  // Unstable assertion: assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      char[] charArray0 = Subject.DateTimeUtils.splitMillis((String) null, "LOCALhost");
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      char[] charArray0 = Subject.DateTimeUtils.splitMillis("", "");
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.domStr((-2699));
      assertEquals("(invalidDOM)", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.domStr(2);
      assertEquals("2nd", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.domStr(51);
      assertEquals("(invalidDOM)", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.domStr(43);
      assertEquals("(invalidDOM)", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = Subject.DateTimeUtils.domStr(13);
      assertEquals("13th", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      long long0 = Subject.DateTimeUtils.getMillis(true, 0, 0, 0, (-2699), (-2699), 1777, 0);
      assertEquals((-62179774163000L), long0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      long long0 = Subject.DateTimeUtils.getMillis(false, 100, 100, (-1389), (-1389), 100, 100, 3348);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      long long0 = Subject.DateTimeUtils.getMillis(true, 0, 9, 1777, 0, (-2699), 1777, 9);
      assertEquals((-61992851363000L), long0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      long long0 = Subject.DateTimeUtils.getMillis(false, 56, 255, 255, 56, 255, 255, 1);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Date date0 = Subject.DateTimeUtils.parseDate("null");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Date date0 = Subject.DateTimeUtils.parseDate("");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.DateTimeUtils.parseDate("+qV!4&Z{");
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text '+qV!4&Z{' could not be parsed at index 1
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Date date0 = Subject.DateTimeUtils.parseDate((String) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.regexMatch("http://", "http://", true, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.regexMatch("i;", (String) null, false, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.regexMatch((String) null, (String) null, true, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = Subject.TextUtils.indexOf_re("LS6j\"2&JAGd", 0, '2');
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = Subject.TextUtils.indexOf_re("40", 0, 'g');
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "8Yh'";
      String string0 = Subject.TextUtils.longestCommonPrefix(stringArray0);
      assertEquals("8Yh'", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[1] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[2] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[3] = ".jpeg";
      String string0 = Subject.TextUtils.longestCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[1] = "yyyy-MM-dd HH:mm:ss";
      String string0 = Subject.TextUtils.longestCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Subject.TextUtils.longestCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = Subject.TextUtils.strLeftTrim(" L:@'B T}W\"icI");
      assertEquals("L:@'B T}W\"icI", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = Subject.TextUtils.strLeftTrim("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = new String[27];
      String string0 = Subject.TextUtils.strLeftTrim(stringArray0[1]);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Subject.TextUtils subject_TextUtils0 = new Subject.TextUtils();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "OE;C@2^B!sq5v");
      boolean boolean0 = subject_TextUtils0.regionMatch(")E93\u0003u16.webp", true, 4, charBuffer0, 4, 4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Subject.TextUtils subject_TextUtils0 = new Subject.TextUtils();
      char[] charArray0 = new char[9];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      boolean boolean0 = subject_TextUtils0.regionMatch("(invalidDOM)", false, 2, charBuffer0, 90, (-672));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Subject.TextUtils subject_TextUtils0 = new Subject.TextUtils();
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      boolean boolean0 = subject_TextUtils0.regionMatch("", false, 104, charBuffer0, (-731), 31);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Subject.TextUtils subject_TextUtils0 = new Subject.TextUtils();
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      boolean boolean0 = subject_TextUtils0.regionMatch(charBuffer0, true, (-2267), "", (-1098167251), 1658);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Subject.TextUtils subject_TextUtils0 = new Subject.TextUtils();
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      boolean boolean0 = subject_TextUtils0.regionMatch("", false, 104, charBuffer0, 1658, 31);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Subject.TextUtils subject_TextUtils0 = new Subject.TextUtils();
      boolean boolean0 = subject_TextUtils0.regionMatch("|[:;{o,+/92{g", true, 3524, "CW=`asHQgd_2<XW3{-", (-1771), (-1519));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Subject.TextUtils subject_TextUtils0 = new Subject.TextUtils();
      CharBuffer charBuffer0 = CharBuffer.allocate(2285);
      boolean boolean0 = subject_TextUtils0.regionMatch(charBuffer0, true, 2285, charBuffer0, 0, 0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = Subject.TextUtils.lowerHashCode((String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Subject.TextUtils subject_TextUtils0 = new Subject.TextUtils();
      String string0 = subject_TextUtils0.abbreviate("", "", 968, (-414));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Subject.TextUtils subject_TextUtils0 = new Subject.TextUtils();
      String string0 = subject_TextUtils0.abbreviate("^t{c+?M$ `sYdQ", "", (-1243302596), 9);
      assertEquals("^t{c+?M$ ", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Subject.TextUtils subject_TextUtils0 = new Subject.TextUtils();
      String string0 = subject_TextUtils0.abbreviate("0%1'jXpM[lg3;7?iMB\"", "y", (-2170), 3);
      assertEquals("0%y", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Subject.TextUtils subject_TextUtils0 = new Subject.TextUtils();
      String string0 = subject_TextUtils0.abbreviate("5%1'j6pM[lg3;71iMB\"", "y", 1546, 3);
      assertEquals("yB\"", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Subject.TextUtils subject_TextUtils0 = new Subject.TextUtils();
      String string0 = subject_TextUtils0.abbreviate("c0.+Pw:nyC^i", "X#n", (-1902), 3867);
      assertEquals("c0.+Pw:nyC^i", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Subject.TextUtils subject_TextUtils0 = new Subject.TextUtils();
      String string0 = subject_TextUtils0.abbreviate("7", "-2803 s", 0, (-53));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Subject.TextUtils subject_TextUtils0 = new Subject.TextUtils();
      String string0 = subject_TextUtils0.abbreviate("+qv!4&z{", (String) null, (-1845264212), 6);
      assertEquals("+qv!4&z{", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Subject.TextUtils subject_TextUtils0 = new Subject.TextUtils();
      String string0 = subject_TextUtils0.abbreviate("", "t*Q", 1601, 5);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Subject.TextUtils subject_TextUtils0 = new Subject.TextUtils();
      String string0 = subject_TextUtils0.abbreviate("", "", (-1877), 48);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = Subject.TextUtils.removeNameQuotes("gettoBinaryString");
      assertNotNull(string0);
      assertEquals("gettoBinaryString", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = Subject.TextUtils.removeNameQuotes("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = Subject.TextUtils.removeNameQuotes((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.isNumber("c");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.isNumber(" ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.isNumber("56-07-01");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.isNumber("+fkSfjs,Y.jEy`5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.isNumber("E#mZ.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.isNumber("e(");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.isNumber("127.0.0.1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.isNumber(".jpeg");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.isNumber("0:0:0:0:0:0:0:1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.isNumber("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.isNumber("2");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.isNumber((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.equalsIgnoreCaseHash("", "localHOST");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.equalsIgnoreCaseHash((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.equalsIgnoreCaseHash((String) null, "$KW4vurPl`");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.equalsIgnoreCaseHash("yyyy-MM-dd HH:mm:ss", "yyyy-MM-dd HH:mm:ss");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = Subject.TextUtils.subString("#n~BxS#g", "#n~BxS#g");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = Subject.TextUtils.subString("de", "", "", false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = Subject.TextUtils.subString("(invalidDOM)", "v", "", false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = Subject.TextUtils.subString("localHOST", "", "gettoBinaryString", false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = Subject.TextUtils.subString(";;A\u0006xXzfgc]>us", (String) null, "");
      assertNotNull(string0);
      assertEquals(";;A\u0006xXzfgc]>us", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = Subject.TextUtils.removeNameQuotes("yyyy/MM/dd HH:mm:ss");
      assertEquals("yyyy/MM/dd HH:mm:ss", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.isNotEmpty("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = Subject.TextUtils.isNotEmpty("FI5");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String[] stringArray0 = new String[1];
      boolean boolean0 = Subject.TextUtils.isNotEmpty(stringArray0[0]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      long long0 = Subject.WebUtils.ipToLong("127.0.0.1");
      assertEquals(2130706433L, long0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isSubnet("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isSubnet("+qv!4&z{");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isSubnet("|[:;{o,+/92{g");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isSubnet(";P_&4'A{o^-z?IE[e<]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isSubnet((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isSubnet("yyyy/MM/dd HH:mm:ss");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isv4("b`r&Bf#`{-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isPublicv4("https://");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isPublicv4("fe80:yyyy-mm-dd hh:mm:ss");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.WebUtils.isPublicv4((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("comp5111.assignment.cut.Subject$WebUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isPrivatev4nonet_int(169, 169, 169, 169);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isPrivatev4nonet_int(2341, 1, (-2093064), 2341);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isIntranetv4("comp5111.assignment.cut.Subject$WebUtils");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isIntranetv4("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = Subject.WebUtils.clearDomainPort("");
      //  // Unstable assertion: assertEquals("", string0);
      //  // Unstable assertion: assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = Subject.WebUtils.clearDomainPort("de.");
      assertNotNull(string0);
      assertEquals("de", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = Subject.WebUtils.clearDomainPort("yyyy-MM-dd HH:mm:ss");
      assertNotNull(string0);
      assertEquals("yyyy-mm-dd hh", string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = Subject.WebUtils.clearDomainPort((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isDomainPrivate("N", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isDomainPrivate((String) null, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isDomainPrivate(")Btv)da/kxn%Es", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[5] = (byte)9;
      byte[] byteArray1 = Subject.WebUtils.removeWhitespace(byteArray0);
      assertEquals(8, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[6] = (byte)13;
      byte[] byteArray1 = Subject.WebUtils.removeWhitespace(byteArray0);
      assertEquals(8, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[6] = (byte)10;
      byte[] byteArray1 = Subject.WebUtils.removeWhitespace(byteArray0);
      assertEquals(8, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[8] = (byte)32;
      byte[] byteArray1 = Subject.WebUtils.removeWhitespace(byteArray0);
      assertEquals(8, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isIntranet("yyyy-MM-dd HH:mm:ss");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isIntranet("fe80:yyyy-mm-dd hh:mm:ss");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String[] stringArray0 = new String[4];
      int int0 = Subject.WebUtils.localHostInList(stringArray0, (-113));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[2] = "LOCALHOST";
      stringArray0[6] = "LOCALHOST";
      int int0 = Subject.WebUtils.localHostInList(stringArray0, 16);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = ":/&)p`m4+]A";
      int int0 = Subject.WebUtils.localHostInList(stringArray0, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = Subject.WebUtils.getString((String) null, 1446);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = Subject.WebUtils.getString("yE+<-?)qr)[)ux", 1777);
      assertEquals("yE+<-?)qr)[)ux", string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isIntranet("LOCALHOST");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isIntranetv4("0000:0000:0000:0000:0000:0000:0000:0001");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isIntranet("::1");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isIntranet("0:0:0:0:0:0:0:1");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isIntranet("5%1'j6pM[lg3;71iMB\"");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isIntranet("127.0.0.1");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "null";
      List<Method> list0 = Subject.WebUtils.getMethods((List<Object>) linkedList0, stringArray0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String[] stringArray0 = new String[6];
      Object object0 = new Object();
      linkedList0.offerLast(object0);
      stringArray0[0] = "{";
      List<Method> list0 = Subject.WebUtils.getMethods((List<Object>) linkedList0, stringArray0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "LOCALHOST";
      linkedList0.add((Object) "");
      List<Method> list0 = Subject.WebUtils.getMethods((List<Object>) linkedList0, stringArray0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Object object0 = new Object();
      List<Object> list0 = List.of((Object) "", object0, object0, (Object) "", object0, object0, object0, object0);
      List<Method> list1 = Subject.WebUtils.getMethods(list0, stringArray0);
      assertEquals(0, list1.size());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "K");
      List<Method> list0 = Subject.WebUtils.getMethods((List<Object>) linkedList0);
      assertEquals(7, list0.size());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isImgFileName(".webp");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isImgFileName("::1.gif");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isImgFileName(".jpeg");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isImgFileName(".jpg");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isImgFileName(".png");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      boolean boolean0 = Subject.WebUtils.isImgFileName(")E93\u0003u16");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Subject subject0 = new Subject();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(45750678);
      linkedList0.add(integer0);
      List<Method> list0 = Subject.WebUtils.getMethods((List<Integer>) linkedList0);
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Subject.WebUtils subject_WebUtils0 = new Subject.WebUtils();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Subject.DateTimeUtils subject_DateTimeUtils0 = new Subject.DateTimeUtils();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = Subject.TextUtils.subString("jug5fG", "|()[bKP");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Subject.TextUtils subject_TextUtils0 = new Subject.TextUtils();
      String string0 = subject_TextUtils0.abbreviate((String) null, (String) null, (-2147481871), 0);
      assertNull(string0);
  }
}
